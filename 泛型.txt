### 1. public class 类名<类型参数> 

在类名后面多了一个尖括号 "<>",代表一个**类型参数**泛型就是**参数化的类型**

解释一下什么叫“ 类型参数 ”，它可以和方法中的形参类比：

1. 相同点：和形参的名字无意义一样，“”里面的字母T也无意义，你爱叫啥叫啥。

2. 区别：形参代表某个类型的一个变量，而类型参数**代表一个具体的类型**。形参是在调用方法时被赋值的；而泛型是在实例化类的对象时，声明类型时确定的

泛型可以在方法中声明，也可以在类中声明，在哪声明，在哪里的内部调用。在方法中声明泛型格式是在  访问权限和 返回值类型中间声明。

example: public static <T extends Number> void fun(T temp){}

在两个具体的泛型类之间（声明确切类型的泛型类）是不存在继承关系的，即使其泛型类型之间存在继承关系。

#### 2. 通配符

​				无界限通配符 <?>：表示

​				上限通配符 <? extends 类名>在类和方法处都可以使用

​				下限通配符 <? super 类名> 只能在方法处使用

通配符是可以接受任意类型的泛型对象

易错点：子类的泛型类型不能用父类的泛型类型，要与对象的多态性区分开

eg： Info<String>   不能用  Info<Object>  接收

#### 3.泛型接口（两种实现方式）

3.1 public class Info <T> implements Inf <T>(){}

3.2 public class Info implements Inf <具体的类>(){}

#### 4. 泛型方法

eg: public static <T> T fun(T t){}

static定义了<T>的意思是，方法红传入或者返回的泛型类型由调用方法处传入的参数决定
